// MARK: - AutoDatabaseMappable
import RealmSwift
import DatabaseObjectsMapper
{% for type in types.all|annotated:"AutoImport" %}
{% for value in type.annotations.AutoImport|toArray %}
import {{ value }}
{% endfor %}
{% endfor %}

// swiftlint:disable file_length

{% macro mapVariable var %}{% typed var as Variable %}
    {# Supported base persistable types #}
    {% set intTypes "Int,Int8,Int16,Int32,Int64"|split:"," %}{% typed intTypes as [String] %}
    {% set baseTypes "Int,Int8,Int16,Int32,Int64,Float,Double,Bool,String,Data,Date,Decimal128,ObjectId,URL"|split:"," %}{% typed baseTypes as [String] %}
    {% set isBaseType %}{% for baseType in baseTypes where baseType == var.typeName.unwrappedTypeName %}true{% endfor %}{% endset %}
    {% if isBaseType == "true" or var.type.based.FailableCustomPersistable or var.type.based.CustomPersistable or var.type.based.PersistableEnum %}
    @Persisted{% if var.annotations.indexed %}(indexed: true){% endif %} var {{ var.name }}: {{var.typeName}}
    {% endif %}
    {# Supported codable types types #}
    {% if var.type.based.DictionaryCodable and not var.type.based.DatabaseMappable and not var.type.based.UniquelyMappable %}@Persisted var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %}: Data{% endif %}{% endif %}
    {# Persisted objects #}
    {% if var.type.based.DatabaseMappable or var.type.based.UniquelyMappable %}@Persisted var {{ var.name }}: {{var.typeName.unwrappedTypeName}}Container?{% endif %}
    {# Relations #}
    {% if var.typeName.name|hasPrefix:"Relation" and var.typeName.isGeneric and var.defaultValue|contains:"type: .inverse" %}@Persisted(originProperty: "{{var.annotations.inverseRelation}}") var {{ var.name }}: LinkingObjects<{{var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName}}Container>{% endif %}
    {% if var.typeName.name|hasPrefix:"Relation" and var.typeName.isGeneric and var.defaultValue|contains:"type: .direct" %}@Persisted var {{ var.name }}: List<{{var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName}}Container>{% endif %}
    {% if var.typeName.name|hasPrefix:"EmbeddedRelation" and var.typeName.isGeneric and var.defaultValue|contains:"type: .direct" %}@Persisted var {{ var.name }}: List<{{var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName}}Container>{% endif %}
    {# Arrays -> List or Data #}
    {% if var.typeName.isArray %}
    {% set isIntType %}{% for intType in intTypes where intType == var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName %}true{% endfor %}{% endset %}
    {% set isBaseType %}{% for baseType in baseTypes where baseType == var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName %}true{% endfor %}{% endset %}
    {% if not var.typeName.isOptional and not var.typeName.generic.typeParameters.first.typeName.isOptional and ( isBaseType == "true" or var.typeName.array.elementType.based.FailableCustomPersistable or var.typeName.array.elementType.based.CustomPersistable or var.typeName.array.elementType.based.PersistableEnum) %}
    @Persisted var {{ var.name }}: List<{{var.typeName.generic.typeParameters.first.typeName}}>
    {% elif var.typeName.array.elementType.based.DictionaryCodable or var.typeName.array.elementType.based.Codable or isIntType == "true" or var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName == "Float" or var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName == "Double" or var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName == "Bool" or var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName == "String" or var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName == "Data" or var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName == "Date" %}@Persisted var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %}: Data{% endif %}
    {% endif %}
    {% endif %}
    {# Dictionary -> Map or Data #}
    {% if var.typeName.isDictionary %}
    {% set isBaseType %}{% for baseType in baseTypes where baseType == var.typeName.dictionary.valueTypeName.unwrappedTypeName %}true{% endfor %}{% endset %}
    {% if not var.typeName.isOptional and var.typeName.dictionary.keyTypeName.name == "String" and not var.typeName.dictionary.valueTypeName.isOptional and ( isBaseType == "true" or var.typeName.dictionary.valueType.based.FailableCustomPersistable or var.typeName.dictionary.valueType.based.CustomPersistable or var.typeName.dictionary.valueType.based.PersistableEnum) %}
    @Persisted var {{ var.name }}: Map<String, {{ var.typeName.dictionary.valueTypeName }}>
    {% elif (var.typeName.dictionary.keyType.based.DictionaryCodable or var.typeName.dictionary.keyType.based.Codable) and (var.typeName.dictionary.valueType.based.DictionaryCodable or var.typeName.dictionary.valueType.based.Codable) %}
    @Persisted var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %}: Data{% endif %}
    {% endif %}
    {% endif %}
    {# Set -> MutableSet or Data #}
    {% if var.typeName.isGeneric and var.typeName.generic.name == "Set" %}
    {% set isBaseType %}{% for baseType in baseTypes where baseType == var.typeName.generic.typeParameters.first.typeName.unwrappedTypeName %}true{% endfor %}{% endset %}
    {% if not var.typeName.isOptional and not var.typeName.generic.typeParameters.first.typeName.isOptional and (isBaseType == "true" or var.typeName.generic.typeParameters.first.type.based.FailableCustomPersistable or var.typeName.generic.typeParameters.first.type.based.CustomPersistable or var.typeName.generic.typeParameters.first.type.based.PersistableEnum) %}
    @Persisted var {{ var.name }}: MutableSet<{{var.typeName.generic.typeParameters.first.typeName}}>
    {% elif var.typeName.generic.typeParameters.first.type.based.DictionaryCodable or var.typeName.generic.typeParameters.first.type.based.Codable %}@Persisted var {{ var.name }}{% if var.typeName.isOptional %}: Data?{% else %}: Data{% endif %}{% endif %}
    {% endif %}
    {% if var.type.kind == "enum" %}{% set enumVar var.type %}{% typed enumVar as Enum %}
    {% set isIntType %}{% for intType in intTypes where intType == enumVar.rawTypeName %}true{% endfor %}{% endset %}
    {% if not enumVar.based.PersistableEnum and not enumVar.hasAssociatedValues and ( isIntType == "true" or enumVar.rawTypeName.name == "Float" or enumVar.rawTypeName.name == "Double" ) %}@Persisted var {{ var.name }}: {{enumVar.rawTypeName.name}}{% if var.typeName.isOptional %}?{% endif %}{% endif %}
    {% if not enumVar.based.PersistableEnum and not enumVar.hasAssociatedValues and enumVar.rawTypeName.name == "String" %}@Persisted var {{ var.name }}: {{enumVar.rawTypeName.name}}{% if var.typeName.isOptional %}?{% endif %}{% endif %}
    {% endif %}
{% endmacro %}
{% macro iterateVariables variables idName %}{% typed variables as [Variable] %}{% typed idName as String %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" and variable.name != idName %}
    {% if not variable.annotations.skipMapping %}{% call mapVariable variable %}{% endif %}
    {% endfor %}
{% endmacro %}

// MARK: - AutoDatabaseMappable for classes, structs
{% for type in types.implementing.AutoDatabaseMappable|!enum|!protocol %}
// MARK: - {{ type.name }} generated container
{{ type.accessLevel }} class {{ type.name }}Container: {% if type.annotations.embedded %}Embedded{% endif %}Object, {% if type.based.UniquelyMappable %}Unique{% endif %}DatabaseContainer {
{% for variable in type.staticVariables where variable.name == "idKey" %}
{% set idName variable.defaultValue|replace:"\",""|replace:type.name,""|replace:".","" %}
{% for var in type.storedVariables where var.name == idName %}
    public static var idKey: WritableKeyPath<{{ type.name }}Container, {{ var.typeName }}> = \{{ type.name }}Container.{{ idName }}
    @Persisted(primaryKey: true) var {{ idName }}: {{ var.typeName }}
{% endfor %}
{% call iterateVariables type.storedVariables idName %}
{% endfor %}
{% if not type.based.UniquelyMappable %}
{% call iterateVariables type.storedVariables "" %}
{% endif %}
}

extension {{ type.name }}: KeyPathConvertible {
    public static func key(for keyPath: PartialKeyPath<{{ type.name }}>) -> String {
        switch keyPath {
        {% for var in type.storedVariables %}
        case \{{ type.name }}.{{ var.name }}: return "{{ var.name }}"
        {% endfor %}
        default:
            fatalError("Unhandled key path")
        }
    }
}
{% endfor %}
